#   theme_minimal() + no_axis +
#   geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
#   geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="yellow", color="yellow")+
#   geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state))+
#   geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
#   geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
#   geom_path(data = coastal_points, aes(x = longitude, y = latitude), colour = "red", size = .2)
#
#Plot with coastal line to create polygons
ggplot() +
geom_sf(data=coastal_munic, color="black", size=.01, show.legend = FALSE) +
theme_minimal() + no_axis +
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .005,shape = 21, fill="yellow", color="yellow")+
geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state), size=.005)+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
geom_sf(data=coastal_line, color="black", size=.15, show.legend = FALSE)
munic_points_2[which(munic_points_2$point == 84), "radians_orthogonal"] = -.12
munic_points_2[which(munic_points_2$point == 83), "radians_orthogonal"] = -.12
munic_points_2[which(munic_points_2$point == 82), "radians_orthogonal"] = -.9
munic_points_2[which(munic_points_2$point == 81), "radians_orthogonal"] = -.95
munic_points_2[which(munic_points_2$point == 80), "radians_orthogonal"] = -.85
munic_points_2[which(munic_points_2$point == 79), "radians_orthogonal"] = -.75
#   labs(subtitle="States and Municipalities", size=8) +
#   theme_minimal() + no_axis +
#   geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
#   geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="yellow", color="yellow")+
#   geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state))+
#   geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
#   geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
#   geom_path(data = coastal_points, aes(x = longitude, y = latitude), colour = "red", size = .2)
#
#Plot with coastal line to create polygons
ggplot() +
geom_sf(data=coastal_munic, color="black", size=.01, show.legend = FALSE) +
theme_minimal() + no_axis +
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .005,shape = 21, fill="yellow", color="yellow")+
geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state), size=.005)+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
geom_sf(data=coastal_line, color="black", size=.15, show.legend = FALSE)
install.packages("ggdag")
#  set theme of all DAGs to `theme_dag()`
library(ggdag)
theme_set(theme_dag())
dagify(y ~ x) %>%
ggdag()
dagify(y ~~ x) %>%
ggdag()
#  canonicalize the DAG: Add the latent variable in to the graph
dagify(y ~~ x) %>%
ggdag_canonical()
dagify(y ~ x,
x ~ a,
a ~ y) %>%
ggdag()
smoking_ca_dag <- dagify(cardiacarrest ~ cholesterol,
cholesterol ~ smoking + weight,
smoking ~ unhealthy,
weight ~ unhealthy,
labels = c("cardiacarrest" = "Cardiac\n Arrest",
"smoking" = "Smoking",
"cholesterol" = "Cholesterol",
"unhealthy" = "Unhealthy\n Lifestyle",
"weight" = "Weight"),
latent = "unhealthy",
exposure = "smoking",
outcome = "cardiacarrest")
ggdag(smoking_ca_dag, text = FALSE, use_labels = "label")
ggdag_adjustment_set(smoking_ca_dag, text = FALSE, use_labels = "label", shadow = TRUE)
fever_dag <- collider_triangle(x = "Influenza",
y = "Chicken Pox",
m = "Fever")
ggdag(fever_dag, text = FALSE, use_labels = "label")
ggdag_dseparated(fever_dag, text = FALSE, use_labels = "label")
ggdag_dseparated(fever_dag, controlling_for = "m",
text = FALSE, use_labels = "label")
dagify(fever ~ flu + pox,
acetaminophen ~ fever,
labels = c("flu" = "Influenza",
"pox" = "Chicken Pox",
"fever" = "Fever",
"acetaminophen" = "Acetaminophen")) %>%
ggdag_dseparated(from = "flu", to = "pox", controlling_for = "acetaminophen",
text = FALSE, use_labels = "label")
dagify(y ~ x) %>%
ggdag()
dagify(b ~ x) %>%
ggdag()
#  canonicalize the DAG: Add the latent variable in to the graph
dagify(y ~~ x) %>%
ggdag_canonical()
dagify(Y_b ~ LCR,
Y_b ~ Oil_Boom
Y_a) %>%
ggdag()
dagify(Y_b ~ LCR,
Y_b ~ Oil_Boom) %>%
ggdag()
dagify(Y_b ~ LCR,
Y_b ~ Oil) %>%
ggdag()
dagify(Y_b ~ LCR,
Y_b ~ Oil,
Y_b ~ Other) %>%
ggdag()
dagify(Y_b ~ LCR,
Y_b ~ Oil,
Y_b ~ Other,
Y_a ~ Other) %>%
ggdag()
################################################################
#Construct Orthogonal and Parallel Coastal Projections for
#Brazilian Municipalities, Used in Oil & Gas Royalty Distribution
################################################################
#By: Erik Katovich
#Last modified: 9/1/2020
#Contact: Github: ekatovich
#         Email: ekatovich@wisc.edu
#Does: This R script reconstructs the geodesic (orthogonal and parallel) coastal projections of
#municipal boundaries implemented by the Institudo Brasileiro de Geografia e Estatistica for
#the purposes of determining offshore oil and gas royalty distributions to affected municipalities.
#The script also plots every offshore oil well registered with the National Oil Agency (ANP) since
#2000 and allocates each well to the municipalities that are aligned parallel or orthogonal to it.
#All procedures (and special exceptions) implemented in this script are designed to replicate
#the specifications made in the documents included in the accompanying folder called "Documents."
#All attempts have been made to make these projections as true to the official IBGE projections
#as possible, but slight inaccuracies persist and the results of this script should not be considered
#as reflecting official boundaries or distributions.
#Latitude and longitude of municipal boundary points were identified manually in Tableau, and are subject
#to minor innaccuracies. Projection lengths are specified manually in the
# Coastal_Coordinates_Municipalities.csv file. These are also subject to minor inprecisions.
################################################################
#1. Setup
################################################################
#First, copy the "Brazil_GeodesicProjections" folder to the desired place on your computer.
#Clear workspace by removing all variables from local environment
rm(list=ls())
#Set working directory
#Adjust this file path to the location where you have saved the Brazil_GeodesicProjections file on your computer
setwd("C:/Users/17637/Documents/GitHub/Brazil_GeodesicProjections")
#Load libraries
library(geobr)
library(ggplot2)
#library(gganimate)
#library(gifski)
library(sf)
library(sp)
library(dplyr)
library(rio)
library(geosphere)
library(foreign)
library(magick)
library(spData)
library(maptools)
library(ptinpoly)
library(ggsflabel)
library(data.table)
#####################
#Import required data
#####################
#Use GeoBR package to download required shapefiles (requires internet connection)
# Download all states in Brazil
state <- read_state(year=2010)
# Download all municipalities in Brazil
muni <- read_municipality(year=2010)
#Coastal line
coastal_line <- st_read("Inputs/Shapefiles/Linha_de_Costa_2018_20190308.shp")
#Continental limit
continental_limit <- st_read("Inputs/Shapefiles/lim_outros_limites_oficiais_l.shp")
#IBGE coastal line points
coastal_points <- read.csv("Inputs/Data/Coastal_Line_Coordinates_States.csv")
coastal_munic <- st_read("Inputs/Shapefiles/Mun_Linha_de_Costa_2018_20190308_Atrib.shp")
#Municipal boundary points and angles
munic_points <- read.csv("Inputs/Data/Coastal_Coordinates_Municipalities.csv")
#####################
#Import optional data
#####################
#These datasets are not required in this script, but may be added to maps for illustrative purposes.
#Pre-sal polygon
pre_sal_polygon <- st_read("Inputs/Shapefiles/Poligono_Pre_Sal.shp")
#Bathimetric curves
bath_curves <- st_read("Inputs/Shapefiles/rel_curva_batimetrica_l.shp")
#Oil fields
production_fields <- st_read("Inputs/Shapefiles/Campos_de_Producao.shp")
######################################
# Remove plot axis
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
################################################################
#2. Wells Data
################################################################
#Import wells data
wells <- read.csv("Inputs/Data/Wells_Table.csv", header = TRUE, sep = ",")
#Clean latitude and longitude points for mapping
wells$LATITUDE_BASE_DD <- as.character(wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- as.character(wells$LONGITUDE_BASE_DD)
wells$LATITUDE_BASE_DD <- gsub(",",".", wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- gsub(",",".", wells$LONGITUDE_BASE_DD)
wells$LATITUDE_BASE_DD <- as.numeric(wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- as.numeric(wells$LONGITUDE_BASE_DD)
#Extract year of beginning, end, and conclusion of drilling
wells$INICIO <- as.character(wells$INICIO)
wells$CONCLUSAO <- as.character(wells$CONCLUSAO)
wells$TERMINO <- as.character(wells$TERMINO)
wells[which(wells$INICIO==""),'INICIO'] <- "NA/NA/NA"
wells[which(wells$CONCLUSAO==""),'CONCLUSAO'] <- "NA/NA/NA"
wells[which(wells$TERMINO==""),'TERMINO'] <- "NA/NA/NA"
inicio <- strsplit(wells$INICIO, '/')
inicio <- do.call('rbind', inicio)
inicio <- strsplit(inicio[,3], " ")
inicio <- do.call('rbind', inicio)
conclu <- strsplit(wells$CONCLUSAO, '/')
conclu <- do.call('rbind', conclu)
conclu <- strsplit(conclu[,3], " ")
conclu <- do.call('rbind', conclu)
term <- strsplit(wells$TERMINO, '/')
term <- do.call('rbind', term)
term <- strsplit(term[,3], " ")
term <- do.call('rbind', term)
wells$Begin_Year <- as.numeric(as.character(inicio[,1]))
wells$Conclusion_Year <- as.numeric(as.character(conclu[,1]))
wells$End_Year <- as.numeric(as.character(term[,1]))
#Categorize wells by "Type": Development, Exploratory, or Other
wells[wells$TIPO=="Explotatório", "Type"] <- "Development"
wells[wells$TIPO=="Exploratório", "Type"] <- "Exploratory"
wells[wells$TIPO=="", "Type"] <- "Other"
#Categorize wells into "Successfull" and "Unsuccessfull" by "REclassificacao"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR ACIDENTE MECÂNICO ", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR ERUPÇÃO ", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR IMPOSSIBILIDADE DE AVALIAÇÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OBJETIVO FORA DE PREVISÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OBJETIVO/ALVO NÃO ATINGIDO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OUTRAS RAZÕES", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR PERDA CIRCULAÇÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="CONTROLE DE ERUPÇÃO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="DESCARTE DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM GÁS NATURAL E CONDENSADO ", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXPERIMENTAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="INDEFINIDO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE ÁGUA ADITIVADA ", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE CO2", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE GÁS NATURAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE QUALQUER OUTRO FLUIDO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE VAPOR", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="OBSERVAÇÃO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="OUTRAS FINALIDADES", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PESQUISA MINERAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PORTADOR DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUÇÃO DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE GÁS NATURAL E CONDENSADO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE PETRÓLEO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS GÁS NATURAL", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO SEM INDÍCIOS", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="TREINAMENTO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="", "Success"] <- "Other"
#Create new dataset that includes only off-shore wells that were successful and unsuccessfull
#wells_offshore <- wells[which(wells$Success!="Other" & wells$TERRA_MAR == "M"),]
wells_offshore <- wells[which(wells$TERRA_MAR == "M"),]
ggplot() +
geom_sf(data=state, color="black", size=.3, show.legend = FALSE) +
geom_sf(data=muni, color="green", size=.1, show.legend = FALSE) +
labs(subtitle="States and Municipalities", size=8) +
theme_minimal() + no_axis +
geom_sf(data=bath_curves, fill="orchid", color="lightskyblue2", size=1, show.legend = FALSE)+
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
geom_path(data = coastal_points, aes(x = longitude, y = latitude), colour = "red", size = 1.5)+
geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = 2,shape = 21, fill="yellow", color="black")+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
ggsave("Outputs/Maps/CoastalLine_and_StateBoundaries.pdf")
View(state)
ggplot() +
geom_sf(data=state, color="black", size=.3, show.legend = FALSE) +
theme_minimal() + no_axis +
#######################################################################################
#4. Compute orthogonal angles from municipal boundary points
#######################################################################################
#Plot to check orthogonal and parallel lines
ggplot() +
geom_sf(data=coastal_munic, color="black", size=.001, show.legend = FALSE) +
theme_minimal() + no_axis +
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
#geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .005, shape = 16, fill="yellow", color="yellow")+
geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state), size=.005)+
geom_spoke(data = munic_points, aes(x = longitude, y = latitude, angle = radians_parallel, radius = length_parallel, colour = state), size=.005)+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red", size=.1)+
#geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
geom_sf(data=coastal_line, color="black", size=.02, show.legend = FALSE)+
ggsave("Outputs/Maps/Municipalities_Orthogonal_and_Parallel_Projections.pdf")
ggplot() +
geom_sf(data=state, color="black", size=.3, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", fill = "grey", size=.3, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", fill = "grey", size=1, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", fill = "grey", size=1, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", fill = "white", size=1, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", fill="", size=1, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=state, color="black", size=1, show.legend = FALSE) +
theme_minimal() + no_axis
ggplot() +
geom_sf(data=muni, color="green", size=.1, show.legend = FALSE) +
geom_sf(data=state, color="black", size=.7, show.legend = FALSE) +
labs(subtitle="States and Municipalities", size=8) +
theme_minimal() + no_axis +
geom_sf(data=bath_curves, fill="orchid", color="lightskyblue2", size=1, show.legend = FALSE)+
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
geom_path(data = coastal_points, aes(x = longitude, y = latitude), colour = "red", size = 1.5)+
geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = 2,shape = 21, fill="yellow", color="black")+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
ggsave("Outputs/Maps/CoastalLine_and_StateBoundaries.pdf")
ggplot() +
geom_sf(data=state, color="black", size=.5, show.legend = FALSE) +
labs(subtitle="States and Municipalities", size=8) +
theme_minimal() + no_axis +
geom_sf(data=bath_curves, fill="orchid", color="lightskyblue2", size=1, show.legend = FALSE)+
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
geom_path(data = coastal_points, aes(x = longitude, y = latitude), colour = "red", size = 1.5)+
geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = 2,shape = 21, fill="yellow", color="black")+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red")+
ggsave("Outputs/Maps/CoastalLine_and_StateBoundaries.pdf")
#Orthogonals
ggplot() +
geom_sf(data=coastal_munic, color="black", size=.001, show.legend = FALSE) +
theme_minimal() + no_axis +
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
#geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .005, shape = 16, fill="yellow", color="yellow")+
geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state), size=.005)+
#geom_spoke(data = munic_points, aes(x = longitude, y = latitude, angle = radians_parallel, radius = length_parallel, colour = state), size=.005)+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red", size=.1)+
#geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
geom_sf(data=coastal_line, color="black", size=.02, show.legend = FALSE)+
ggsave("Outputs/Maps/Municipalities_Orthogonal_and_Parallel_Projections.pdf")
#Coastal line
coastal_line <- st_read("Inputs/Shapefiles/Linha_de_Costa_2018_20190308.shp")
#Continental limit
continental_limit <- st_read("Inputs/Shapefiles/lim_outros_limites_oficiais_l.shp")
#IBGE coastal line points
coastal_points <- read.csv("Inputs/Data/Coastal_Line_Coordinates_States.csv")
coastal_munic <- st_read("Inputs/Shapefiles/Mun_Linha_de_Costa_2018_20190308_Atrib.shp")
#Municipal boundary points and angles
munic_points <- read.csv("Inputs/Data/Coastal_Coordinates_Municipalities.csv")
#####################
#Import optional data
#####################
#These datasets are not required in this script, but may be added to maps for illustrative purposes.
#Pre-sal polygon
pre_sal_polygon <- st_read("Inputs/Shapefiles/Poligono_Pre_Sal.shp")
#Bathimetric curves
bath_curves <- st_read("Inputs/Shapefiles/rel_curva_batimetrica_l.shp")
#Oil fields
production_fields <- st_read("Inputs/Shapefiles/Campos_de_Producao.shp")
######################################
# Remove plot axis
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
################################################################
#2. Wells Data
################################################################
#Import wells data
wells <- read.csv("Inputs/Data/Wells_Table.csv", header = TRUE, sep = ",")
#Clean latitude and longitude points for mapping
wells$LATITUDE_BASE_DD <- as.character(wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- as.character(wells$LONGITUDE_BASE_DD)
wells$LATITUDE_BASE_DD <- gsub(",",".", wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- gsub(",",".", wells$LONGITUDE_BASE_DD)
wells$LATITUDE_BASE_DD <- as.numeric(wells$LATITUDE_BASE_DD)
wells$LONGITUDE_BASE_DD <- as.numeric(wells$LONGITUDE_BASE_DD)
#Extract year of beginning, end, and conclusion of drilling
wells$INICIO <- as.character(wells$INICIO)
wells$CONCLUSAO <- as.character(wells$CONCLUSAO)
wells$TERMINO <- as.character(wells$TERMINO)
wells[which(wells$INICIO==""),'INICIO'] <- "NA/NA/NA"
wells[which(wells$CONCLUSAO==""),'CONCLUSAO'] <- "NA/NA/NA"
wells[which(wells$TERMINO==""),'TERMINO'] <- "NA/NA/NA"
inicio <- strsplit(wells$INICIO, '/')
inicio <- do.call('rbind', inicio)
inicio <- strsplit(inicio[,3], " ")
inicio <- do.call('rbind', inicio)
conclu <- strsplit(wells$CONCLUSAO, '/')
conclu <- do.call('rbind', conclu)
conclu <- strsplit(conclu[,3], " ")
conclu <- do.call('rbind', conclu)
term <- strsplit(wells$TERMINO, '/')
term <- do.call('rbind', term)
term <- strsplit(term[,3], " ")
term <- do.call('rbind', term)
wells$Begin_Year <- as.numeric(as.character(inicio[,1]))
wells$Conclusion_Year <- as.numeric(as.character(conclu[,1]))
wells$End_Year <- as.numeric(as.character(term[,1]))
#Categorize wells by "Type": Development, Exploratory, or Other
wells[wells$TIPO=="Explotatório", "Type"] <- "Development"
wells[wells$TIPO=="Exploratório", "Type"] <- "Exploratory"
wells[wells$TIPO=="", "Type"] <- "Other"
#Categorize wells into "Successfull" and "Unsuccessfull" by "REclassificacao"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR ACIDENTE MECÂNICO ", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR ERUPÇÃO ", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR IMPOSSIBILIDADE DE AVALIAÇÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OBJETIVO FORA DE PREVISÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OBJETIVO/ALVO NÃO ATINGIDO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR OUTRAS RAZÕES", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="ABANDONADO POR PERDA CIRCULAÇÃO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="CONTROLE DE ERUPÇÃO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="DESCARTE DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM GÁS NATURAL E CONDENSADO ", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE CAMPO COM PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="DESCOBRIDOR DE NOVA JAZIDA PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXPERIMENTAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="EXTENSÃO PARA PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="INDEFINIDO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE ÁGUA ADITIVADA ", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE CO2", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE GÁS NATURAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE QUALQUER OUTRO FLUIDO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="INJEÇÃO DE VAPOR", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="OBSERVAÇÃO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="OUTRAS FINALIDADES", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PESQUISA MINERAL", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PORTADOR DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PORTADOR DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUÇÃO DE ÁGUA", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR COMERCIAL DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="PRODUTOR SUBCOMERCIAL DE PETRÓLEO, GÁS NATURAL E CONDENSADO", "Success"] <- "Successfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE GÁS NATURAL E CONDENSADO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE PETRÓLEO", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS DE PETRÓLEO E GÁS NATURAL", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO COM INDÍCIOS GÁS NATURAL", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="SECO SEM INDÍCIOS", "Success"] <- "Unsuccessfull"
wells[wells$RECLASSIFICACAO=="TREINAMENTO", "Success"] <- "Other"
wells[wells$RECLASSIFICACAO=="", "Success"] <- "Other"
#Create new dataset that includes only off-shore wells that were successful and unsuccessfull
#wells_offshore <- wells[which(wells$Success!="Other" & wells$TERRA_MAR == "M"),]
wells_offshore <- wells[which(wells$TERRA_MAR == "M"),]
#Orthogonals
ggplot() +
geom_sf(data=coastal_munic, color="black", size=.001, show.legend = FALSE) +
theme_minimal() + no_axis +
geom_sf(data=continental_limit, color="blue", size=.2, show.legend = FALSE) +
#geom_point(data = munic_points, aes(x = longitude, y = latitude), size = .005, shape = 16, fill="yellow", color="yellow")+
geom_spoke(data = munic_points_2, aes(x = longitude, y = latitude, angle = radians_orthogonal, radius = length_orthogonal, colour = state), size=.005)+
#geom_spoke(data = munic_points, aes(x = longitude, y = latitude, angle = radians_parallel, radius = length_parallel, colour = state), size=.005)+
geom_spoke(data = coastal_points, aes(x = longitude, y = latitude, angle = radians, radius = length), colour = "red", size=.1)+
#geom_point(data = coastal_points, aes(x = longitude, y = latitude), size = .02,shape = 21, fill="blue", color="blue")+
geom_sf(data=coastal_line, color="black", size=.02, show.legend = FALSE)+
ggsave("Outputs/Maps/Municipalities_Orthogonal_and_Parallel_Projections.pdf")
